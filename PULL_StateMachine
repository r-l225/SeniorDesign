#include <Arduino.h>
#include <DFRobot_BMI160.h>

// ================= FreeRTOS Handles =================
TaskHandle_t TaskSensorsHandle;
TaskHandle_t TaskNavigationHandle;

// ================= Pins =================
const int FrontLeftSensor  = 36;
const int FrontRightSensor = 39;
const int BackLeftSensor = 34;
const int BackRightSensor = 35;

// Motor pins
const int L_IN1 = 0;
const int L_IN2 = 2;
const int R_IN3 = 4;
const int R_IN4 = 16;

// Button & LEDs
const int BUTTON_PIN  = 15;
const int R_LED = 32;
const int G_LED = 33;
const int B_LED = 23;



// ================= PWM =================
const int PWMFreq       = 1000;   
const int PWMResolution = 8;     
const int MAX_SPEED     = 255;    

// ================= BMI160 =================
DFRobot_BMI160 bmi160;
const int8_t i2c_addr = 0x69;

SemaphoreHandle_t stateMutex;  // protects shared data

// ================= State Machine =================
enum class RobotState {
  WAITING,       
  MOVING_FORWARD,
  STOPPED,
  RECORRECT        
};
volatile RobotState currentState = RobotState::WAITING;

// ================= Gyro Calibration =================
float deltaAngle = 0.0f;
float x_comp = 0.0f;
float y_comp = 0.0f;
static float gyroOffset = 0.0f;


int readingIndex = 0; // Index for the circular buffer
float totalAccel = 0; // Sum of readings
float avgAccel = 0; // Average of forward accelerations

const float movementThreshold = 1.05f;
volatile bool boundaryDetected = false;
volatile bool movementDetected = true;

uint8_t boundary;

// Forward declarations
void TaskSensors(void *pvParameters);
void TaskNavigation(void *pvParameters);
void changeState(RobotState newState);

void calibrateGyro(int samples = 100);
float readAccel();
float readGyro();
uint8_t readIR();
void StopMotors();
void StraightForward();
void countdownStart();
void RotateToBigAngle(float setpoint);
void RotateToSmallAngle(float setpoint);
void recorrect(uint8_t bounds);




// ============ setup() ============
void setup() {
  Serial.begin(115200);
  delay(100);

  pinMode(R_LED, OUTPUT);
  pinMode(G_LED, OUTPUT);
  pinMode(B_LED, OUTPUT);
  digitalWrite(R_LED, LOW);
  digitalWrite(G_LED, LOW);
  digitalWrite(B_LED, LOW);

  pinMode(BUTTON_PIN,INPUT_PULLUP);

  // IR sensor pins
  pinMode(FrontLeftSensor, INPUT);
  pinMode(FrontRightSensor, INPUT);
  pinMode(BackLeftSensor, INPUT);
  pinMode(BackRightSensor, INPUT);

  // Motor pin setup
  ledcAttach(L_IN1,  PWMFreq, PWMResolution);
  ledcAttach(L_IN2,  PWMFreq, PWMResolution);
  ledcAttach(R_IN3,  PWMFreq, PWMResolution);
  ledcAttach(R_IN4,  PWMFreq, PWMResolution);

  // ============ Initialize the BMI160 ============
  if (bmi160.softReset() != BMI160_OK) {
    Serial.println("BMI160 reset failed");
    while (1);
  }
  if (bmi160.I2cInit(i2c_addr) != BMI160_OK) {
    Serial.println("BMI160 I2C init failed");
    while (1);
  }

  // ============ Create Mutex ============
  stateMutex = xSemaphoreCreateMutex();

  // ============ Create Tasks ============
  xTaskCreatePinnedToCore(
    TaskSensors,        
    "TaskSensors",      
    10000,              
    NULL,               
    2,                  // Higher priority
    &TaskSensorsHandle, 
    1                   
  );

  xTaskCreatePinnedToCore(
    TaskNavigation,     
    "TaskNavigation",   
    10000,              
    NULL,               
    1,                  // Lower priority
    &TaskNavigationHandle,
    0                   
  );
}

void loop() {
   if (currentState == RobotState::WAITING) {
    int btn =digitalRead(BUTTON_PIN);
    if (btn == LOW) {  // Button pressed
      Serial.println("Button pressed");
      countdownStart();  // Start the countdown
      currentState =  RobotState::MOVING_FORWARD;  
    } else {
      digitalWrite(R_LED, HIGH);
      digitalWrite(G_LED, LOW);
      digitalWrite(B_LED, LOW);
      delay(200);
      digitalWrite(R_LED, LOW);
      delay(200);
    }
  }
}



void countdownStart() {
  for (int i = 5; i > 0; i--) {
    // LED colors: Red -> Blue -> Green
    if (i % 3 == 0) {
      digitalWrite(R_LED, HIGH);  
      digitalWrite(B_LED, LOW);
      digitalWrite(G_LED, LOW);
      Serial.println("Countdown: Red LED is ON");
    } else if (i % 3 == 1) {
      digitalWrite(R_LED, LOW);
      digitalWrite(B_LED, HIGH);  
      digitalWrite(G_LED, LOW);
      Serial.println("Countdown: Blue LED is ON");
    } else {
      digitalWrite(R_LED, LOW);
      digitalWrite(B_LED, LOW);
      digitalWrite(G_LED, HIGH); 
      Serial.println("Countdown: Green LED is ON");
    }

    Serial.print("Countdown: ");
    Serial.println(i); 
    delay(1000);       
  }

 
  digitalWrite(R_LED, LOW);
  digitalWrite(G_LED, LOW);
  digitalWrite(B_LED, LOW);

  Serial.println("Countdown complete");
}


void changeState(RobotState newState) {
  xSemaphoreTake(stateMutex, portMAX_DELAY);
  currentState = newState;
  xSemaphoreGive(stateMutex);
}
// ============ TaskSensors() ============
void TaskSensors(void *pvParameters) {
    // Print once to indicate which core is running this task
    Serial.print("TaskSensors running on core ");
    Serial.println(xPortGetCoreID());

    for (;;) {
        // Skip sensor processing while in WAITING state
        if (currentState == RobotState::WAITING) {
            vTaskDelay(100 / portTICK_PERIOD_MS);
            continue;
        }
        // 1) Read sensor data 
        //xSemaphoreTake(stateMutex, portMAX_DELAY);
        deltaAngle = readGyro(deltaAngle);
        Serial.print("Angle 1 : ");
        Serial.println(deltaAngle);
        //xSemaphoreGive(stateMutex);
        //deltaAngle = readGyro(deltaAngle);
        boundary = readIR();
        float forwardAccel = readAccel(); 
         
        if (boundary == 3){ // Endline Detected
          changeState(RobotState::STOPPED);
        } 
        else if (boundary == 5){ //Right Boundary Detected
          changeState(RobotState::RECORRECT);
        }
        else if (boundary == 10){ //Left Boundary DEtected
          changeState(RobotState::RECORRECT);
        }

        static unsigned long noMovementStart = 0; // Tracks the start of the no-movement period

        // Debugging: Print the current acceleration
        Serial.print("Forward Acceleration: ");
        Serial.println(forwardAccel);

// Check if forward acceleration is below the movement threshold
if (fabs(forwardAccel) < movementThreshold) {
    if (noMovementStart == 0) {
        noMovementStart = millis(); // Start the no-movement timer
    }
    // Check if the no-movement period exceeds 3 seconds
    if (millis() - noMovementStart > 3000) { // 3-second delay
        Serial.println("No significant movement detected for 3 seconds. Stopping robot.");
        changeState(RobotState::STOPPED); // Change the robot's state to STOPPED
        noMovementStart = 0; // Reset the timer after stopping
    }
} else {
    noMovementStart = 0; // Reset the timer immediately if movement is detected
    Serial.println("Movement detected. Timer reset.");
}
        // Delay to allow task scheduling
        vTaskDelay(50 / portTICK_PERIOD_MS);
    }
}


// ============ TaskNavigation() ============
void TaskNavigation(void *pvParameters) {
  Serial.print("TaskNavigation running on core ");
  Serial.println(xPortGetCoreID());

  for (;;) {
    RobotState localState;

    // Copy shared data
    xSemaphoreTake(stateMutex, portMAX_DELAY);
    localState   = currentState;
    xSemaphoreGive(stateMutex);

    switch (localState) {
      case RobotState::WAITING:
        StopMotors();
        break;

      case RobotState::MOVING_FORWARD:
        digitalWrite(R_LED, LOW);
        digitalWrite(B_LED, HIGH);
        digitalWrite(G_LED, LOW);

        // Correct heading in real-time
        //deltaAngle += readGyro(deltaAngle);
        StraightForward();
        
        digitalWrite(R_LED, HIGH);
        digitalWrite(G_LED, LOW);
        digitalWrite(B_LED, LOW);

        break;

      case RobotState::STOPPED:
        StopMotors();
        digitalWrite(B_LED, HIGH); // Indicate STOPPED
        digitalWrite(G_LED, LOW);
        digitalWrite(R_LED, LOW);
        break;

      case RobotState::RECORRECT:
        digitalWrite(B_LED, LOW); // Indicate STOPPED
        digitalWrite(G_LED, LOW);
        digitalWrite(R_LED, LOW);
        StopMotors();
        digitalWrite(B_LED, HIGH); // Indicate STOPPED
        digitalWrite(G_LED, LOW);
        digitalWrite(R_LED, HIGH);
        recorrect(boundary);
        break;
    }

    vTaskDelay(20 / portTICK_PERIOD_MS);
  }
}

// Read the Gyroscope
float readGyro(float angle){
  int rslt;
  int trash;
  float Yaw = 0;
  ////only read gyro data from bmi160
  int16_t accelGyro[6]={0}; 
  //get both accel and gyro data from bmi160
  //parameter accelGyro is the pointer to store the data
  rslt = bmi160.getAccelGyroData(accelGyro);

  if(rslt == 0){
    for(int i=0;i<6;i++){
      if (i==2){
        //the first three are gyro data
        Yaw = (((accelGyro[i]+11.85)/128)*0.6);
        if(Yaw > 0.15){
          angle += Yaw;
        }
        else if(Yaw <= 0.15 and Yaw >=-0.15){
          angle += 0;
        }
        else{
          angle -= abs(Yaw);
        }
      }
      else{
        // the first two (pitch and roll) are irrelevant for our angle.
        //the following three data are accel data
        trash = accelGyro[i];
      }
    }
    //Serial.println();
  }else{
    Serial.println("err");
  }
  delay(50);
  return angle;
}


float readAccel() {
    int16_t accelGyro[6] = {0};
    float side2side = 0;
    float fwdbkwd = 0;
    float horizontal = 0;
    float x_comp = 0;
    float y_comp = 0;

    // Read accel and gyro data
    int rslt = bmi160.getAccelGyroData(accelGyro);
    if (rslt == 0) {
        for (int i = 3; i < 6; i++) { // Process only accel data
            if (i == 4) {
                side2side = (accelGyro[i] / 16384.0) - 0.02;
                x_comp += (fabs(side2side) > 0.03) ? side2side : 0;
                //Serial.print("Side-to-Side Accel: "); Serial.println(side2side, 4);
            } else {
                fwdbkwd = (accelGyro[i] / 16384.0) + 0.05;
                y_comp = (fabs(fwdbkwd) > 0.03) + 1 ? fwdbkwd : 0;
                //Serial.print("Forward Accel: "); Serial.println(fwdbkwd, 4);
            }
        }
    } else {
        Serial.println("Error reading accelerometer data.");
    }
    horizontal = sqrt((y_comp * y_comp) - (x_comp * x_comp));
    delay(50); // Optional delay for stabilization
    return horizontal; // Return forward-backward component
}

void FWD(){
      ledcWrite(L_IN1, 200);     // L Forward == maxPWM
      ledcWrite(L_IN2, 0);          // L Backward == 0
      ledcWrite(R_IN3, 200); // R Forward == maxPWM - error Correction
      ledcWrite(R_IN4, 0); 
}

void BKWD(){
      ledcWrite(L_IN1, 0);     // L Forward == maxPWM
      ledcWrite(L_IN2, 200);          // L Backward == 0
      ledcWrite(R_IN3, 0); // R Forward == maxPWM - error Correction
      ledcWrite(R_IN4, 200); 
}

void StraightForward(){
  float maxPWMR = 255;
  float maxPWML = 255;
  float setpoint = 0.0f;
  float angle = deltaAngle;
  Serial.print("Angle 2 : ");
  Serial.println(angle);
  float error = setpoint;
  float PWM_L = 0.0f;
  float PWM_R = 0.0f;

  float Kp = 80;
  float Kd = 0;
  error = setpoint + angle;

    if (error >= 1){
      PWM_R = maxPWMR - abs(error * Kp + Kd/error);

      ledcWrite(L_IN1, maxPWML);     // L Forward == maxPWM
      ledcWrite(L_IN2, 0);          // L Backward == 0
      ledcWrite(R_IN3, int(PWM_R)); // R Forward == maxPWM - error Correction
      ledcWrite(R_IN4, 0);          // R Backward == 0

    }
    else if(error <= -1){
      PWM_L = maxPWML - abs(error * Kp + Kd/error);

      ledcWrite(L_IN1, int(PWM_L)); // L Forward == maxPWM - error Correction
      ledcWrite(L_IN2, 0);          // L Backward == 0
      ledcWrite(R_IN3, maxPWMR);     // R Forward == maxPWM
      ledcWrite(R_IN4, 0);          // R Backward
    }
    else{
      ledcWrite(L_IN1, maxPWML); // L Forward == maxPWM - error Correction
      ledcWrite(L_IN2, 0);          // L Backward == 0
      ledcWrite(R_IN3, maxPWMR);     // R Forward == maxPWM
      ledcWrite(R_IN4, 0);          // R Backward
    }
}

// ============ StopMotors() ============
void StopMotors() {
  // Turn off all pins
  ledcWrite(L_IN1, 0);
  ledcWrite(L_IN2, 0);
  ledcWrite(R_IN3, 0);
  ledcWrite(R_IN4, 0);
}

// ============ readIR() ============
uint8_t readIR() {
  int statusFL = digitalRead(FrontLeftSensor);
  int statusFR = digitalRead(FrontRightSensor);
  int statusBL = digitalRead(BackLeftSensor);
  int statusBR = digitalRead(BackRightSensor);
  // If both sensors triggered => 3, etc.
  return (statusBL << 3) | (statusBR << 2) |(statusFL << 1) | statusFR; 
}

void recorrect(uint8_t bounds){
  StopMotors();
  if (bounds == 5){ // boundary on right
    BKWD();
    delay(200);
    RotateToBigAngle(-90); //
    FWD();
    delay(250);
    RotateToSmallAngle(60);
    deltaAngle = 0;
  }
  else if(bounds == 10){// boundary on left
    BKWD();
    delay(200);
    RotateToBigAngle(90); //
    FWD();
    delay(250);
    RotateToSmallAngle(-60);
    deltaAngle = 0;
  }
  StopMotors();
  changeState(RobotState::MOVING_FORWARD);
}

void RotateToSmallAngle(float setpoint){
  float angle = 0;
  float error = setpoint;
  float PWM_L = 0;
  float PWM_R = 0;
  float Kp = 200/setpoint;
  float temp = 0;
  if (error < 0){
    while (error <= -2){
      PWM_L = error * Kp;
      PWM_R = error * Kp;
      if (PWM_R < 150){
        ledcWrite(L_IN1, 150); // L Forward
        ledcWrite(L_IN2, 0);          // L Backward == 0
        ledcWrite(R_IN3, 0);          // R Forward == 0
        ledcWrite(R_IN4, 150); // R Backward
      }
      else{
        ledcWrite(L_IN1, int(PWM_L)); // L Forward
        ledcWrite(L_IN2, 0);          // L Backward == 0
        ledcWrite(R_IN3, 0);          // R Forward == 0
        ledcWrite(R_IN4, int(PWM_R)); // R Backward
      }
      angle += readGyro(temp);
      error = setpoint - angle;
      //// Motor Controls
    }
    StopMotors();
  }
  else{
    while (error >= 2){
      PWM_L = error * Kp;
      PWM_R = error * Kp;
      if (PWM_L < 150){
      ledcWrite(L_IN1, 0); // L Forward
      ledcWrite(L_IN2, 150);          // L Backward == 0
      ledcWrite(R_IN3, 150);          // R Forward == 0
      ledcWrite(R_IN4, 0); // R Backward
      }
      ledcWrite(L_IN1, 0);          // L Forward == 0
      ledcWrite(L_IN2, int(PWM_L)); // L Backward 
      ledcWrite(R_IN3, int(PWM_R)); // R Forward
      ledcWrite(R_IN4, 0);          // R Backward == 0
      
      angle += readGyro(temp);
      error = setpoint - angle;
    }
    StopMotors();
  }
}

// Rotate to any desired angle greater than 120 degrees
void RotateToBigAngle(float setpoint){
  float angle = 0;
  float error = setpoint;
  float PWM_L = 0;
  float PWM_R = 0;
  float Kp = 255/setpoint;
   float temp = 0;
  if (error < 0){
    while (error <= -2){
      PWM_L = error * Kp;
      PWM_R = error * Kp;

      if (PWM_L < 150){
        ledcWrite(L_IN1, 150); // L Forward
        ledcWrite(L_IN2, 0);          // L Backward == 0
        ledcWrite(R_IN3, 0);          // R Forward == 0
        ledcWrite(R_IN4, 150); // R Backward
      }

      else{
        ledcWrite(L_IN1, int(PWM_L)); // L Forward
        ledcWrite(L_IN2, 0);          // L Backward == 0
        ledcWrite(R_IN3, 0);          // R Forward == 0
        ledcWrite(R_IN4, int(PWM_R)); // R Backward
      }
      angle += readGyro(temp);
      error = setpoint - angle;
      //// Motor Controls
    }
    StopMotors();
  }
  else{
    while (error >= 2){
      PWM_L = error * Kp;
      PWM_R = error * Kp;
      
      if (PWM_L < 150){
        ledcWrite(L_IN1, 0);          // L Forward == 0
        ledcWrite(L_IN2, 150); // L Backward 
        ledcWrite(R_IN3, 150); // R Forward
        ledcWrite(R_IN4, 0);          // R Backward == 0
      }
      else{
        ledcWrite(L_IN1, 0);          // L Forward == 0
        ledcWrite(L_IN2, int(PWM_L)); // L Backward 
        ledcWrite(R_IN3, int(PWM_R)); // R Forward
        ledcWrite(R_IN4, 0);          // R Backward == 0
      }
      angle += readGyro(temp);
      error = setpoint - angle;
    }
    StopMotors();
  }
}


