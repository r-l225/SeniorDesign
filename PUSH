//// S.R.N Robotics
// Nadia Al-Shewear
// Rogelio Lucio
// Samuel Winburn
#include <DFRobot_BMI160.h>



// IR Sensor Pins 
int IRSensor1 = 36;
int IRSensor2 = 39;
int IRSensor3 = 34;
int IRSensor4 = 35;

const int trigPin = 26; 
const int echoPin = 25; 

// Declarations for the BMI160
DFRobot_BMI160 bmi160;
const int8_t i2c_addr = 0x69;


// Motor Control Pins
const int L_IN1 = 2;   // Control pin 1 for left motor
const int L_IN2 = 0;   // Control pin 2 for left motor
const int R_IN3 = 4;   // Control pin 1 for right motor
const int R_IN4 = 16;  // Control pin 2 for right motor

// PWM frequency and resolution settings for ESP32
const int PWMFreq = 1000;       // PWM frequency in Hz
const int PWMResolution = 8;    // PWM resolution (8 bits)
const int MAX_SPEED = 255;      // Maximum PWM duty cycle


// Thresholds
const int detectionThreshold = 40;

// State Machine
enum State { SEARCHING, MOVING_FORWARD, AVOID, STOPPED };
volatile State currentState = SEARCHING;

volatile uint8_t boundaryCode = 0xF;
volatile bool opponentDetected = false;

// Task handles
TaskHandle_t Task1;  // Sensor reading task
TaskHandle_t Task2;  // Motor control task

void IR_Sensor_setup();
uint8_t IR_Sensor_read();
void ultra_Sensor_setup();
float ultra_Sensor_read();
void TaskSensors(void *pvParameters);
void TaskNavigation(void *pvParameters);
void StopMotors();
void RotateInPlace();
void Forward();
void Reverse();
void turnLeft();
void turnRight();
void changeState();
void RotateSearch();


void setup() {
  Serial.begin(115200);

  IR_Sensor_setup();
  ultra_Sensor_setup();


  // Motor pin setup
  ledcAttach(L_IN1,  PWMFreq, PWMResolution);
  ledcAttach(L_IN2,  PWMFreq, PWMResolution);
  ledcAttach(R_IN3,  PWMFreq, PWMResolution);
  ledcAttach(R_IN4,  PWMFreq, PWMResolution);

  //init the hardware bmin160  
  if (bmi160.softReset() != BMI160_OK){
    Serial.println("reset false");
    while(1);
  }
  
  //set and init the bmi160 i2c address
  if (bmi160.I2cInit(i2c_addr) != BMI160_OK){
    Serial.println("init false");
    while(1);
  }

  // Create the sensor and navigation tasks
  xTaskCreatePinnedToCore(TaskSensors, "TaskSensors", 10000, NULL, 2, &Task1, 1);  // Core 1 for sensors and state management
  xTaskCreatePinnedToCore(TaskNavigation, "TaskNavigation", 10000, NULL, 2, &Task2, 0);  // Core 0 for motor control
}

void loop() {
}

// Core 1: Sensor data collection and state management
void TaskSensors(void *pvParameters) {
  for (;;) {
    boundaryCode = IR_Sensor_read();
    float distance = ultra_Sensor_read();
    opponentDetected = (distance < detectionThreshold);
    changeState();
    vTaskDelay(100 / portTICK_PERIOD_MS);
  }
}


// Core 0: Navigation and motor control
void TaskNavigation(void *pvParameters) {
  for (;;) {
    switch (currentState) {
      case SEARCHING:
      Serial.println("Searching.");
      RotateSearch();
        break;
      case MOVING_FORWARD:
      Serial.println("Moving Forward.");
        Forward();
        break;
        case AVOID:
      Serial.println("Avoid.");
       handleBoundaryMovement();
        break;
      case STOPPED:
      Serial.println("Stopped.");
      StopMotors();
        break;
    }
    vTaskDelay(100/ portTICK_PERIOD_MS);
  }
}

// Handle state changes based on sensor input
void changeState() {
  if (boundaryCode != 0xF) {
    currentState = AVOID;
    Serial.println("State changed to avoid.");
  } else if (opponentDetected) {
    currentState = MOVING_FORWARD;
    Serial.println("State changed to move forward.");
  } else {
    currentState = SEARCHING;
    Serial.println("State cahnged to searching.");
  }
}

void handleBoundaryMovement() {
  switch (boundaryCode) {
    case 0x7:
      Forward();
      Serial.println("7.");
      break;
    case 0xB:
      Forward();
      Serial.println("B");
      break;
    case 0xD:
      Reverse();
      RotateToAngle(-90);
      Serial.println("D");
      break;
      case 0xE:
      Reverse();
      RotateToAngle(90);
      Serial.println("E");
      break;
    case 0x3:
      Forward();
      Serial.println("3");
      break;
    case 0xC:
      Reverse();
      RotateToAngle(90);
      Serial.println("C");
      break;
    case 0x5:
      RotateToAngle(-90);
      Serial.println("5");
      break;
    case 0xA:
     RotateToAngle(90);
      Serial.println("A");
      break;
    default:
     StopMotors();
      Serial.println("Rotating DEFAULT.");
      break;
  }
}

void IR_Sensor_setup() {
  pinMode(IRSensor1, INPUT);
  pinMode(IRSensor2, INPUT);
  pinMode(IRSensor3, INPUT);
  pinMode(IRSensor4, INPUT);
}

uint8_t IR_Sensor_read() {
  int status1 = digitalRead(IRSensor1);
  int status2 = digitalRead(IRSensor2);
  int status3 = digitalRead(IRSensor3);
  int status4 = digitalRead(IRSensor4);

  uint8_t boundaryCode = (status4 << 3) | (status3 << 2) | (status2 << 1) | status1;
  
  Serial.print("Sensor States: ");
  Serial.print("Front-Left: "); Serial.print(status1);
  Serial.print(" | Front-Right: "); Serial.print(status2);
  Serial.print(" | Back-Left: "); Serial.print(status3);
  Serial.print(" | Back-Right: "); Serial.println(status4);
  Serial.print("Boundary Code: ");
  Serial.println(boundaryCode, BIN);

  return boundaryCode;
}


void ultra_Sensor_setup() {
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
}

float ultra_Sensor_read() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH);
  return (duration * 0.034) / 2;
}


// Read the Gyroscope
float readGyro(){
  float angle = 0;
  int rslt;
  int trash;
  float Yaw = 0;
  ////only read gyro data from bmi160
  int16_t accelGyro[6]={0}; 
  //get both accel and gyro data from bmi160
  //parameter accelGyro is the pointer to store the data
  rslt = bmi160.getAccelGyroData(accelGyro);

  if(rslt == 0){
    for(int i=0;i<6;i++){
      if (i==2){
        //the first three are gyro data
        Yaw = (((accelGyro[i]+11.85)/128)*0.6);
        if(Yaw > 0.15){
          angle += Yaw;
        }
        else if(Yaw <= 0.15 and Yaw >=-0.15){
          angle += 0;
        }
        else{
          angle -= abs(Yaw);
        }
        //Serial.print(Yaw);Serial.print("\t"); Serial.print(Yaw/3.14); Serial.print("\t"); Serial.print(angle); Serial.print("\t");
        //Serial.println(accelGyro[i]*3.14/180.0);
      }
      else{
        //the following three data are accel data
        trash = accelGyro[i];
      }
    }
    
    //Serial.println();
  }else{
    Serial.println("err");
  }
  delay(50);
  return angle;
}

// Rotate to any desired angle
void RotateToAngle(float setpoint){
  float angle = 0;
  float error = setpoint;
  float PWM_L = 0;
  float PWM_R = 0;
  float Kp = 255/setpoint;
  if (error < 0){
    while (error <= -2){
      PWM_L = error * Kp;
      PWM_R = error * Kp;

      ledcWrite(L_IN1, int(PWM_L)); // L Forward
      ledcWrite(L_IN2, 0);          // L Backward == 0
      ledcWrite(R_IN3, 0);          // R Forward == 0
      ledcWrite(R_IN4, int(PWM_R)); // R Backward

      angle += readGyro();
      error = setpoint - angle;
      //// Motor Controls
    }
    ledcWrite(L_IN1, 0);          // L Forward == 0
    ledcWrite(L_IN2, 0);          // L Backward == 0
    ledcWrite(R_IN3, 0);          // R Forward == 0
    ledcWrite(R_IN4, 0);          // R Backward == 0
  }
  else{
    while (error >= 2){
      PWM_L = error * Kp;
      PWM_R = error * Kp;
      
      ledcWrite(L_IN1, 0);          // L Forward == 0
      ledcWrite(L_IN2, int(PWM_L)); // L Backward 
      ledcWrite(R_IN3, int(PWM_R)); // R Forward
      ledcWrite(R_IN4, 0);          // R Backward == 0

      angle += readGyro();
      error = setpoint - angle;
    }
    ledcWrite(L_IN1, 0);          // L Forward == 0
    ledcWrite(L_IN2, 0);          // L Backward == 0
    ledcWrite(R_IN3, 0);          // R Forward == 0
    ledcWrite(R_IN4, 0);          // R Backward == 0
  }
}

void RotateSearch(){
  RotateToAngle(45);
  delay(1000);
}


void Forward() {
  int speed = 255; 
  ledcWrite(L_IN1, speed);
  ledcWrite(L_IN2, 0);
  ledcWrite(R_IN3, speed);
  ledcWrite(R_IN4, 0);
}

void RotateInPlace() {   
    int speed = 200;
    ledcWrite(L_IN1, speed);  
    ledcWrite(L_IN2, 0);    
    ledcWrite(R_IN3, 0);  
    ledcWrite(R_IN4, speed); 
}

void sharpRight() {
  int speed = 150; 
  Serial.println("Sharp Right Turn.");
  ledcWrite(L_IN1, speed);
  ledcWrite(L_IN2, 0);
  ledcWrite(R_IN3, 0);  
  ledcWrite(R_IN4, 0);
  delay(100);
}

void sharpLeft() {
  int speed = 150; 
  Serial.println("Sharp Left Turn.");
  ledcWrite(L_IN1, 0);  
  ledcWrite(L_IN2, 0);
  ledcWrite(R_IN3, speed);  
  ledcWrite(R_IN4, 0);
  delay(100);
}

void Reverse() {
    int speed = 200; 
    ledcWrite(L_IN1, 0);             
    ledcWrite(L_IN2, speed);            
    ledcWrite(R_IN3, 0);             
    ledcWrite(R_IN4, speed);            
    delay(500);
}

void StopMotors() {
  ledcWrite(L_IN1, 0);
  ledcWrite(L_IN2, 0);
  ledcWrite(R_IN3, 0);
  ledcWrite(R_IN4, 0);
}
