// Samuel Winburn
// Arduino Uno/ESP32-WROOm-32 Code

// Tested and calibrated on the Uno at 115200 Baud
// Pins need to be configured for WROOM (already been decided, just need to import here!)

// ESP32 Pins

const int RightTrigPin = 5; 
const int RightEchoPin = 17; 

const int CenterTrigPin = 26; 
const int CenterEchoPin = 25;

const int LeftTrigPin = 19; 
const int LeftEchoPin = 18; 

const int RIGHT_LED_PIN = 27;
const int CENTER_LED_PIN = 32;
const int LEFT_LED_PIN = 33;

int delayTime = 200;

void setup()
{
  Serial.begin(115200); // Init Serial at 115200 Baud
  ultra_Sensor_setup();
  pinMode(RIGHT_LED_PIN, OUTPUT);
  pinMode(CENTER_LED_PIN, OUTPUT);
  pinMode(LEFT_LED_PIN, OUTPUT);

}

void loop()
{
  
  float ultrasensorDistance1 = ultra_Sensor_read(RightTrigPin, RightEchoPin);
  Serial.println(ultrasensorDistance1);

  if (ultrasensorDistance1 < 50){
    digitalWrite(RIGHT_LED_PIN, HIGH);
  }
  else{
    digitalWrite(RIGHT_LED_PIN, LOW);
  }
  delay(delayTime);
  float ultrasensorDistance2 = ultra_Sensor_read(CenterTrigPin, CenterEchoPin);
  Serial.println(ultrasensorDistance2);
  
  
  if (ultrasensorDistance2 < 50){
    digitalWrite(CENTER_LED_PIN, HIGH);
  }
  else{
    digitalWrite(CENTER_LED_PIN, LOW);
  }
  delay(delayTime;
  float ultrasensorDistance3 = ultra_Sensor_read(LeftTrigPin, LeftEchoPin);
  Serial.println(ultrasensorDistance3);
 

  if (ultrasensorDistance3 < 50){
    digitalWrite(LEFT_LED_PIN, HIGH);
  }
  else{
    digitalWrite(LEFT_LED_PIN, LOW);
  }
  delay(250);
}


void ultra_Sensor_setup() {

  pinMode(RightTrigPin, OUTPUT);
  pinMode(RightEchoPin, INPUT);

  pinMode(CenterTrigPin, OUTPUT);
  pinMode(CenterEchoPin, INPUT);

  pinMode(LeftTrigPin, OUTPUT);
  pinMode(LeftEchoPin, INPUT);
}

float ultra_Sensor_read(byte TRIG_PIN, byte ECHO_PIN){
  float SOUND_SPEED = 0.034;
  long duration;
  float distanceCm;
  // Clears the TRIG_PIN
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(5);
  // Sets the TRIG_PIN on HIGH state for 10 micro seconds
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  // Reads the ECHO_PIN, returns the sound wave travel time in microseconds
  //delayMicroseconds(24);
  duration = pulseIn(ECHO_PIN, HIGH);
  // Calculate the distance
  distanceCm = (duration) * SOUND_SPEED/2;
  
  return distanceCm;
}
