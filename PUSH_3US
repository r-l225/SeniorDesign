//// S.R.N Robotics
// Nadia Al-Shewear
// Rogelio Lucio
// Samuel Winburn


#include <DFRobot_BMI160.h>

SemaphoreHandle_t stateMutex;

const int R_LED = 12;
const int G_LED = 14;
const int B_LED = 27;
const int BUTTON_PIN = 13; // Button pin for starting

// IR Sensor Pins 
int IRSensor1 = 36;
int IRSensor2 = 39;
int IRSensor3 = 34;
int IRSensor4 = 35;

const int CenterTrigPin = 26; 
const int CenterEchoPin = 25; 

const int LeftTrigPin = 22;
const int LeftEchoPin = 21;

const int RightTrigPin = 33;
const int RightEchoPin = 32;

// Declarations for the BMI160
DFRobot_BMI160 bmi160;
const int8_t i2c_addr = 0x69;


// Motor Control Pins
const int L_IN1 = 18;   // Control pin 1 for left motor
const int L_IN2 = 19;   // Control pin 2 for left motor
const int R_IN3 = 4;   // Control pin 1 for right motor
const int R_IN4 = 16;  // Control pin 2 for right motor

// PWM frequency and resolution settings for ESP32
const int PWMFreq = 1000;       // PWM frequency in Hz
const int PWMResolution = 8;    // PWM resolution (8 bits)
const int MAX_SPEED = 255;      // Maximum PWM duty cycle


// Thresholds
const int detectionThreshold = 50;

// State Machine
enum State { WAITING,SEARCHING, MOVING_FORWARD, AVOID, STOPPED, CENTERING };
volatile State currentState = WAITING;

volatile uint8_t boundaryCode = 0xF;
volatile bool opponentDetected = false;
volatile bool centerDetected = false;
volatile bool leftDetected = false;
volatile bool rightDetected = false;

const float SENSOR_ANGLE = 30.0;
const float COS_30 = 0.866;  

// Task handles
TaskHandle_t Task1;  // Sensor reading task
TaskHandle_t Task2;  // Motor control task

void IR_Sensor_setup();
uint8_t IR_Sensor_read();
void ultra_Sensor_setup();
float ultra_Sensor_read(byte TRIG_PIN, byte ECHO_PIN);
void TaskSensors(void *pvParameters);
void TaskNavigation(void *pvParameters);
void StopMotors();
void Forward();
void changeState();
void RotateSearch();
void countdownStart();

void setup() {
  Serial.begin(115200);

  IR_Sensor_setup();
  ultra_Sensor_setup();

  stateMutex = xSemaphoreCreateMutex();

  // Button and LED setup
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  pinMode(R_LED, OUTPUT);
  pinMode(G_LED, OUTPUT);
  pinMode(B_LED, OUTPUT);
  digitalWrite(R_LED, LOW);
  digitalWrite(G_LED, LOW);
  digitalWrite(B_LED, LOW);

  currentState = WAITING;

  // Motor pin setup
  ledcAttach(L_IN1,  PWMFreq, PWMResolution);
  ledcAttach(L_IN2,  PWMFreq, PWMResolution);
  ledcAttach(R_IN3,  PWMFreq, PWMResolution);
  ledcAttach(R_IN4,  PWMFreq, PWMResolution);

  //init the hardware bmin160  
  if (bmi160.softReset() != BMI160_OK){
    Serial.println("reset false");
    while(1);
  }
  //set and init the bmi160 i2c address
  if (bmi160.I2cInit(i2c_addr) != BMI160_OK){
    Serial.println("init false");
    while(1);
  }

  // Create the sensor and navigation tasks
  xTaskCreatePinnedToCore(TaskSensors, "TaskSensors", 10000, NULL, 2, &Task1, 1);  // Core 1 for sensors and state management
  xTaskCreatePinnedToCore(TaskNavigation, "TaskNavigation", 10000, NULL, 3, &Task2, 0);  // Core 0 for motor control
}

void loop() {
  if (currentState == WAITING) {
    int btn =digitalRead(BUTTON_PIN);
    if (btn == LOW) {  // Button pressed
      Serial.println("Button pressed");
      countdownStart();  // Start the countdown
      currentState = SEARCHING;  // Transition to SEARCHING state
    } else {
      digitalWrite(R_LED, HIGH);
      digitalWrite(G_LED, LOW);
      digitalWrite(B_LED, LOW);
      delay(200);
      digitalWrite(R_LED, LOW);
      delay(200);
    }
  }
}

void countdownStart() {
  for (int i = 5; i > 0; i--) {
    // LED colors: Red -> Blue -> Green
    if (i % 3 == 0) {
      digitalWrite(R_LED, HIGH);  
      digitalWrite(B_LED, LOW);
      digitalWrite(G_LED, LOW);
      Serial.println("Countdown: Red LED is ON");
    } else if (i % 3 == 1) {
      digitalWrite(R_LED, LOW);
      digitalWrite(B_LED, HIGH);  
      digitalWrite(G_LED, LOW);
      Serial.println("Countdown: Blue LED is ON");
    } else {
      digitalWrite(R_LED, LOW);
      digitalWrite(B_LED, LOW);
      digitalWrite(G_LED, HIGH); 
      Serial.println("Countdown: Green LED is ON");
    }

    Serial.print("Countdown: ");
    Serial.println(i); 
    delay(1000);       
  }

 
  digitalWrite(R_LED, LOW);
  digitalWrite(G_LED, LOW);
  digitalWrite(B_LED, LOW);

  Serial.println("Countdown complete");
}

// Core 1: Sensor data collection and state management
// In TaskSensors:
void TaskSensors(void *pvParameters) {
  for (;;) {
    if (currentState == WAITING) {
      vTaskDelay(100 / portTICK_PERIOD_MS);  // Skip processing while waiting
      continue;
    }

    xSemaphoreTake(stateMutex, portMAX_DELAY);
    boundaryCode = IR_Sensor_read();
    updateOpponentDetection();
    xSemaphoreGive(stateMutex);

    changeState();
    vTaskDelay(50 / portTICK_PERIOD_MS);
  }
}


// Core 0: Navigation and motor control
void TaskNavigation(void *pvParameters) {
  for (;;) {
    if (currentState == WAITING) {
      StopMotors();  // Ensure motors stay off while waiting
      vTaskDelay(100 / portTICK_PERIOD_MS);
      continue;
    }

    switch (currentState) {
      case SEARCHING:
      digitalWrite(R_LED, LOW);
      digitalWrite(G_LED, HIGH);
      digitalWrite(B_LED, LOW);
        StopMotors();
        RotateSearch();
        break;

      case MOVING_FORWARD:
      digitalWrite(R_LED, HIGH);
      digitalWrite(G_LED, LOW);
      digitalWrite(B_LED, LOW);
        Forward();
        break;

      case AVOID:
      digitalWrite(R_LED, LOW);
      digitalWrite(G_LED, LOW);
      digitalWrite(B_LED, HIGH);
      handleBoundaryMovement();
        break;

      case CENTERING:
        digitalWrite(R_LED, LOW);
        digitalWrite(G_LED, HIGH);
        digitalWrite(B_LED, HIGH);
        CenterOnTarget();
        break;


      case STOPPED:
      digitalWrite(R_LED, LOW);
        StopMotors();
        break;
    }

    vTaskDelay(200 / portTICK_PERIOD_MS);
  }
}

void updateOpponentDetection() {
  float center = ultra_Sensor_read(CenterTrigPin, CenterEchoPin);
  float left = ultra_Sensor_read(LeftTrigPin, LeftEchoPin);
  float right = ultra_Sensor_read(RightTrigPin, RightEchoPin);

  float effectiveLeft = left * COS_30;
  float effectiveRight = right * COS_30;

  xSemaphoreTake(stateMutex, portMAX_DELAY);
  centerDetected = (center <= detectionThreshold);
  leftDetected = (left <= detectionThreshold);
  rightDetected = (right <= detectionThreshold);
  xSemaphoreGive(stateMutex);
}

// Handle state changes based on sensor input
void changeState() {
  // Safely read sensor states
  xSemaphoreTake(stateMutex, portMAX_DELAY);
  bool boundaryDetected = (boundaryCode != 0xF);
  bool currentCenter = centerDetected;
  bool currentLeft = leftDetected;
  bool currentRight = rightDetected;
  xSemaphoreGive(stateMutex);

  if (boundaryDetected) {
    currentState = AVOID;
  } 
  else if (currentCenter) {
    currentState = MOVING_FORWARD;
  }
  else if (currentLeft || currentRight) {
    currentState = CENTERING;
  }
  else {
    currentState = SEARCHING;
  }
}

void CenterOnTarget() {
   xSemaphoreTake(stateMutex, portMAX_DELAY);
  bool currentLeft = leftDetected;
  bool currentRight = rightDetected;
  float leftDist = ultra_Sensor_read(LeftTrigPin, LeftEchoPin) * COS_30;
  float rightDist = ultra_Sensor_read(RightTrigPin, RightEchoPin) * COS_30;
  xSemaphoreGive(stateMutex);

  float diff = rightDist - leftDist;

  if (diff > 5) { 
    ledcWrite(L_IN1, 100);
    ledcWrite(L_IN2, 0);
    ledcWrite(R_IN3, 80);
    ledcWrite(R_IN4, 0);
  } else if (diff < -5) { 
    ledcWrite(L_IN1, 80);
    ledcWrite(L_IN2, 0);
    ledcWrite(R_IN3, 100);
    ledcWrite(R_IN4, 0);
  } else { 
    Forward();
  }
}

void handleBoundaryMovement() {
  switch (boundaryCode) {
    case 0x7:
      Forward();
      Serial.println("7.");
      break;
    case 0xB:
      Forward();
      Serial.println("B");
      break;
    case 0xD:
      StraightBack();
      RotateToBigAngle(120);
      Serial.println("D-front-right");
      break;
      case 0xE:
      StopMotors();
      StraightBack();
      RotateToBigAngle(-120);
      Serial.println("E-front-left");
      break;
    case 0x3:
      Forward();
      Serial.println("3");
      break;
    case 0xC:
    StopMotors();
      StraightBack();
      RotateToBigAngle(180);
      Serial.println("C-2front");
      break;
    case 0x5:
      StopMotors();
      RotateToBigAngle(180);
      Serial.println("5");
      break;
    case 0xA:
      StopMotors();
     RotateToBigAngle(180);
      Serial.println("A");
      break;
    default:
     StopMotors();
      Serial.println("Rotating DEFAULT.");
      break;
  }
}

void IR_Sensor_setup() {
  pinMode(IRSensor1, INPUT);
  pinMode(IRSensor2, INPUT);
  pinMode(IRSensor3, INPUT);
  pinMode(IRSensor4, INPUT);
}

uint8_t IR_Sensor_read() {
  int status1 = digitalRead(IRSensor1);
  int status2 = digitalRead(IRSensor2);
  int status3 = digitalRead(IRSensor3);
  int status4 = digitalRead(IRSensor4);

  uint8_t boundaryCode = (status4 << 3) | (status3 << 2) | (status2 << 1) | status1;
  
  Serial.print("Sensor States: ");
  Serial.print("Front-Left: "); Serial.print(status1);
  Serial.print(" | Front-Right: "); Serial.print(status2);
  Serial.print(" | Back-Left: "); Serial.print(status3);
  Serial.print(" | Back-Right: "); Serial.println(status4);
  Serial.print("Boundary Code: ");
  Serial.println(boundaryCode, BIN);

  return boundaryCode;
}

void ultra_Sensor_setup() {
  pinMode(CenterTrigPin, OUTPUT);
  pinMode(CenterEchoPin, INPUT);
  pinMode(LeftTrigPin, OUTPUT);
  pinMode(LeftEchoPin, INPUT);
  pinMode(RightTrigPin, OUTPUT);
  pinMode(RightEchoPin, INPUT);
}

float ultra_Sensor_read(byte TRIG_PIN, byte ECHO_PIN){
  float SOUND_SPEED = 0.034;
  long duration;
  float distanceCm;
  // Clears the TRIG_PIN
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(5);
  // Sets the TRIG_PIN on HIGH state for 10 micro seconds
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  // Reads the ECHO_PIN, returns the sound wave travel time in microseconds
  //delayMicroseconds(24);
  duration = pulseIn(ECHO_PIN, HIGH);
  // Calculate the distance
  distanceCm = (duration) * SOUND_SPEED/2;
  
  return distanceCm;
}

// Read the Gyroscope
float readGyro(){
  float angle = 0;
  int rslt;
  int trash;
  float Yaw = 0;
  ////only read gyro data from bmi160
  int16_t accelGyro[6]={0}; 
  //get both accel and gyro data from bmi160
  //parameter accelGyro is the pointer to store the data
  rslt = bmi160.getAccelGyroData(accelGyro);

  if(rslt == 0){
    for(int i=0;i<6;i++){
      if (i==2){
        //the first three are gyro data
        Yaw = (((accelGyro[i]+11.85)/128)*0.6);
        if(Yaw > 0.15){
          angle += Yaw;
        }
        else if(Yaw <= 0.15 and Yaw >=-0.15){
          angle += 0;
        }
        else{
          angle -= abs(Yaw);
        }
        //Serial.print(Yaw);Serial.print("\t"); Serial.print(Yaw/3.14); Serial.print("\t"); Serial.print(angle); Serial.print("\t");
        //Serial.println(accelGyro[i]*3.14/180.0);
      }
      else{
        //the following three data are accel data
        trash = accelGyro[i];
      }
    }
    
    //Serial.println();
  }else{
    Serial.println("err");
  }
  delay(50);
  return angle;
}

// Rotate to any desired angle less than 90 degrees
void RotateToSmallAngle(float setpoint){
  float angle = 0;
  float error = setpoint;
  float PWM_L = 0;
  float PWM_R = 0;
  float Kp = 180/setpoint;
  if (error < 0){
    while (error <= -2){
      PWM_L = error * Kp;
      PWM_R = error * Kp;

      ledcWrite(L_IN1, int(PWM_L)); // L Forward
      ledcWrite(L_IN2, 0);          // L Backward == 0
      ledcWrite(R_IN3, 0);          // R Forward == 0
      ledcWrite(R_IN4, int(PWM_R)); // R Backward
      
      angle += readGyro();
      error = setpoint - angle;
      //// Motor Controls
    }
    StopMotors();
  }
  else{
    while (error >= 2){
      PWM_L = error * Kp;
      PWM_R = error * Kp;
      
      ledcWrite(L_IN1, 0);          // L Forward == 0
      ledcWrite(L_IN2, int(PWM_L)); // L Backward 
      ledcWrite(R_IN3, int(PWM_R)); // R Forward
      ledcWrite(R_IN4, 0);          // R Backward == 0
      
      angle += readGyro();
      error = setpoint - angle;
    }
    StopMotors();
  }
}

// Rotate to any desired angle greater than 120 degrees
void RotateToBigAngle(float setpoint){
  float angle = 0;
  float error = setpoint;
  float PWM_L = 0;
  float PWM_R = 0;
  float Kp = 255/setpoint;
  if (error < 0){
    while (error <= -2){
      PWM_L = error * Kp;
      PWM_R = error * Kp;

      if (PWM_L < 75){
        ledcWrite(L_IN1, 75); // L Forward
        ledcWrite(L_IN2, 0);          // L Backward == 0
        ledcWrite(R_IN3, 0);          // R Forward == 0
        ledcWrite(R_IN4, 75); // R Backward
      }

      else{
        ledcWrite(L_IN1, int(PWM_L)); // L Forward
        ledcWrite(L_IN2, 0);          // L Backward == 0
        ledcWrite(R_IN3, 0);          // R Forward == 0
        ledcWrite(R_IN4, int(PWM_R)); // R Backward
      }
      angle += readGyro();
      error = setpoint - angle;
      //// Motor Controls
    }
    StopMotors();
  }
  else{
    while (error >= 2){
      PWM_L = error * Kp;
      PWM_R = error * Kp;
      
      if (PWM_L < 75){
        ledcWrite(L_IN1, 0);          // L Forward == 0
        ledcWrite(L_IN2, 75); // L Backward 
        ledcWrite(R_IN3, 75); // R Forward
        ledcWrite(R_IN4, 0);          // R Backward == 0
      }
      else{
        ledcWrite(L_IN1, 0);          // L Forward == 0
        ledcWrite(L_IN2, int(PWM_L)); // L Backward 
        ledcWrite(R_IN3, int(PWM_R)); // R Forward
        ledcWrite(R_IN4, 0);          // R Backward == 0
      }
      angle += readGyro();
      error = setpoint - angle;
    }
    StopMotors();
  }
}

void RotateSearch(){
  // Rotate clockwise by driving left motor forward and right motor backward
  ledcWrite(L_IN1, 100);  // Medium speed forward for left motor
  ledcWrite(L_IN2, 0);    // Left motor IN2 off

  ledcWrite(R_IN3, 0);    // Right motor IN3 off
  ledcWrite(R_IN4, 100);  // Medium speed backward for right motor
}


void Forward() {
  int speed = 130; 
  ledcWrite(L_IN1, speed);
  ledcWrite(L_IN2, 0);
  ledcWrite(R_IN3, speed);
  ledcWrite(R_IN4, 0);
}

void StopMotors() {
  ledcWrite(L_IN1, 0);
  ledcWrite(L_IN2, 0);

  ledcWrite(R_IN3, 0);
  ledcWrite(R_IN4, 0);
}

void StraightBack(){
  float maxPWM = 160;
  float setpoint = 0;
  float angle = 0;
  float error = setpoint;
  float PWM_L = 0;
  float PWM_R = 0;
  float Kp = maxPWM/10;

  angle += readGyro();
  error = setpoint + angle;
  for (int temp = 0; temp < 9; temp++){

    if (error > 1){
      PWM_L = maxPWM - abs(error * Kp);
      PWM_R = maxPWM - abs(error * Kp);

      ledcWrite(L_IN1, 0);                   // L Forward == maxPWM - error Correction
      ledcWrite(L_IN2, int(PWM_L));              // L Backward == 0
      ledcWrite(R_IN3, 0);                   // R Forward == maxPWM
      ledcWrite(R_IN4, maxPWM);          // R Backward

      angle += readGyro();
      error = setpoint + angle;
    }
    else if (error < -1){
      PWM_L = maxPWM - abs(error * Kp);
      PWM_R = maxPWM - abs(error * Kp);

      ledcWrite(L_IN1, 0);     // L Forward == maxPWM
      ledcWrite(L_IN2, maxPWM);          // L Backward == 0
      ledcWrite(R_IN3, 0); // R Forward == maxPWM - error Correction
      ledcWrite(R_IN4, int(PWM_R));          // R Backward == 0
      
      angle += readGyro();
      error = setpoint + angle;
    }
    else{
      PWM_L = maxPWM - abs(error * Kp);
      PWM_R = maxPWM - abs(error * Kp);
      
      ledcWrite(L_IN1, 0);                   // L Forward == maxPWM - error Correction
      ledcWrite(L_IN2, int(PWM_L));          // L Backward == 0
      ledcWrite(R_IN3, 0);                   // R Forward == maxPWM
      ledcWrite(R_IN4, int(PWM_R));          // R Backward
      
      angle += readGyro();
      error = setpoint + angle;
    }
    angle += readGyro();
    error = setpoint + angle;
  }
  StopMotors();
}
